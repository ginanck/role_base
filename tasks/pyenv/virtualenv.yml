---
# Virtual environment management with PyEnv

- name: Create virtual environments for users
  ansible.builtin.shell: pyenv virtualenv {{ item.1.python_version }} {{ item.1.name }}
  become: true
  become_user: "{{ item.0.username }}"
  with_subelements:
    - "{{ base_pyenv_python_users | default([]) }}"
    - virtualenvs
    - skip_missing: true
  loop_control:
    loop_var: item
    label: "{{ item.0.username }}: {{ item.1.name }}"
  args:
    creates: "{{ pyenv_user_homes[item.0.username] }}/.pyenv/versions/{{ item.1.name }}"
  when: (item.1.state | default('present')) == 'present'

- name: Delete virtual environments marked for removal
  ansible.builtin.shell: pyenv virtualenv-delete -f {{ item.1.name }}
  become: true
  become_user: "{{ item.0.username }}"
  with_subelements:
    - "{{ base_pyenv_python_users | default([]) }}"
    - virtualenvs
    - skip_missing: true
  loop_control:
    loop_var: item
    label: "{{ item.0.username }}: {{ item.1.name }}"
  when: item.1.state is defined and item.1.state == 'absent'

- name: Install pip packages in virtual environments
  ansible.builtin.shell: >
    pyenv activate {{ item.1.name }} && pip install -r 
    {{ item.1.requirements_file | default(pyenv_user_homes[item.0.username] + '/' + item.1.name + '_requirements.txt') }}
  become: true
  become_user: "{{ item.0.username }}"
  with_subelements:
    - "{{ base_pyenv_python_users | default([]) }}"
    - virtualenvs
    - skip_missing: true
  loop_control:
    loop_var: item
    label: "{{ item.0.username }}: {{ item.1.name }}"
  when: (item.1.state | default('present')) == 'present'
